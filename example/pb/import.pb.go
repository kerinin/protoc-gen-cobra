// Code generated by protoc-gen-gogo.
// source: import.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import subpackage "github.com/fiorix/protoc-gen-cobra/example/pb/subpackage"
import subpackage_subsubpackage "github.com/fiorix/protoc-gen-cobra/example/pb/subpackage/subsubpackage"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Import service

type ImportClient interface {
	Simple(ctx context.Context, in *subpackage.Input, opts ...grpc.CallOption) (*subpackage.Output, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Import_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *subpackage.Input, opts ...grpc.CallOption) (Import_ServerStreamClient, error)
	DuplexStream(ctx context.Context, opts ...grpc.CallOption) (Import_DuplexStreamClient, error)
	SubSimple(ctx context.Context, in *subpackage_subsubpackage.Input, opts ...grpc.CallOption) (*subpackage_subsubpackage.Output, error)
	SubClientStream(ctx context.Context, opts ...grpc.CallOption) (Import_SubClientStreamClient, error)
	SubServerStream(ctx context.Context, in *subpackage_subsubpackage.Input, opts ...grpc.CallOption) (Import_SubServerStreamClient, error)
	SubDuplexStream(ctx context.Context, opts ...grpc.CallOption) (Import_SubDuplexStreamClient, error)
}

type importClient struct {
	cc *grpc.ClientConn
}

func NewImportClient(cc *grpc.ClientConn) ImportClient {
	return &importClient{cc}
}

func (c *importClient) Simple(ctx context.Context, in *subpackage.Input, opts ...grpc.CallOption) (*subpackage.Output, error) {
	out := new(subpackage.Output)
	err := grpc.Invoke(ctx, "/pb.Import/Simple", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Import_ClientStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Import_serviceDesc.Streams[0], c.cc, "/pb.Import/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &importClientStreamClient{stream}
	return x, nil
}

type Import_ClientStreamClient interface {
	Send(*subpackage.Input) error
	CloseAndRecv() (*subpackage.Output, error)
	grpc.ClientStream
}

type importClientStreamClient struct {
	grpc.ClientStream
}

func (x *importClientStreamClient) Send(m *subpackage.Input) error {
	return x.ClientStream.SendMsg(m)
}

func (x *importClientStreamClient) CloseAndRecv() (*subpackage.Output, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(subpackage.Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *importClient) ServerStream(ctx context.Context, in *subpackage.Input, opts ...grpc.CallOption) (Import_ServerStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Import_serviceDesc.Streams[1], c.cc, "/pb.Import/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &importServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Import_ServerStreamClient interface {
	Recv() (*subpackage.Output, error)
	grpc.ClientStream
}

type importServerStreamClient struct {
	grpc.ClientStream
}

func (x *importServerStreamClient) Recv() (*subpackage.Output, error) {
	m := new(subpackage.Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *importClient) DuplexStream(ctx context.Context, opts ...grpc.CallOption) (Import_DuplexStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Import_serviceDesc.Streams[2], c.cc, "/pb.Import/DuplexStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &importDuplexStreamClient{stream}
	return x, nil
}

type Import_DuplexStreamClient interface {
	Send(*subpackage.Input) error
	Recv() (*subpackage.Output, error)
	grpc.ClientStream
}

type importDuplexStreamClient struct {
	grpc.ClientStream
}

func (x *importDuplexStreamClient) Send(m *subpackage.Input) error {
	return x.ClientStream.SendMsg(m)
}

func (x *importDuplexStreamClient) Recv() (*subpackage.Output, error) {
	m := new(subpackage.Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *importClient) SubSimple(ctx context.Context, in *subpackage_subsubpackage.Input, opts ...grpc.CallOption) (*subpackage_subsubpackage.Output, error) {
	out := new(subpackage_subsubpackage.Output)
	err := grpc.Invoke(ctx, "/pb.Import/SubSimple", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importClient) SubClientStream(ctx context.Context, opts ...grpc.CallOption) (Import_SubClientStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Import_serviceDesc.Streams[3], c.cc, "/pb.Import/SubClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &importSubClientStreamClient{stream}
	return x, nil
}

type Import_SubClientStreamClient interface {
	Send(*subpackage_subsubpackage.Input) error
	CloseAndRecv() (*subpackage_subsubpackage.Output, error)
	grpc.ClientStream
}

type importSubClientStreamClient struct {
	grpc.ClientStream
}

func (x *importSubClientStreamClient) Send(m *subpackage_subsubpackage.Input) error {
	return x.ClientStream.SendMsg(m)
}

func (x *importSubClientStreamClient) CloseAndRecv() (*subpackage_subsubpackage.Output, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(subpackage_subsubpackage.Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *importClient) SubServerStream(ctx context.Context, in *subpackage_subsubpackage.Input, opts ...grpc.CallOption) (Import_SubServerStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Import_serviceDesc.Streams[4], c.cc, "/pb.Import/SubServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &importSubServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Import_SubServerStreamClient interface {
	Recv() (*subpackage_subsubpackage.Output, error)
	grpc.ClientStream
}

type importSubServerStreamClient struct {
	grpc.ClientStream
}

func (x *importSubServerStreamClient) Recv() (*subpackage_subsubpackage.Output, error) {
	m := new(subpackage_subsubpackage.Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *importClient) SubDuplexStream(ctx context.Context, opts ...grpc.CallOption) (Import_SubDuplexStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Import_serviceDesc.Streams[5], c.cc, "/pb.Import/SubDuplexStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &importSubDuplexStreamClient{stream}
	return x, nil
}

type Import_SubDuplexStreamClient interface {
	Send(*subpackage_subsubpackage.Input) error
	Recv() (*subpackage_subsubpackage.Output, error)
	grpc.ClientStream
}

type importSubDuplexStreamClient struct {
	grpc.ClientStream
}

func (x *importSubDuplexStreamClient) Send(m *subpackage_subsubpackage.Input) error {
	return x.ClientStream.SendMsg(m)
}

func (x *importSubDuplexStreamClient) Recv() (*subpackage_subsubpackage.Output, error) {
	m := new(subpackage_subsubpackage.Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Import service

type ImportServer interface {
	Simple(context.Context, *subpackage.Input) (*subpackage.Output, error)
	ClientStream(Import_ClientStreamServer) error
	ServerStream(*subpackage.Input, Import_ServerStreamServer) error
	DuplexStream(Import_DuplexStreamServer) error
	SubSimple(context.Context, *subpackage_subsubpackage.Input) (*subpackage_subsubpackage.Output, error)
	SubClientStream(Import_SubClientStreamServer) error
	SubServerStream(*subpackage_subsubpackage.Input, Import_SubServerStreamServer) error
	SubDuplexStream(Import_SubDuplexStreamServer) error
}

func RegisterImportServer(s *grpc.Server, srv ImportServer) {
	s.RegisterService(&_Import_serviceDesc, srv)
}

func _Import_Simple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(subpackage.Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportServer).Simple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Import/Simple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportServer).Simple(ctx, req.(*subpackage.Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Import_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImportServer).ClientStream(&importClientStreamServer{stream})
}

type Import_ClientStreamServer interface {
	SendAndClose(*subpackage.Output) error
	Recv() (*subpackage.Input, error)
	grpc.ServerStream
}

type importClientStreamServer struct {
	grpc.ServerStream
}

func (x *importClientStreamServer) SendAndClose(m *subpackage.Output) error {
	return x.ServerStream.SendMsg(m)
}

func (x *importClientStreamServer) Recv() (*subpackage.Input, error) {
	m := new(subpackage.Input)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Import_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(subpackage.Input)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImportServer).ServerStream(m, &importServerStreamServer{stream})
}

type Import_ServerStreamServer interface {
	Send(*subpackage.Output) error
	grpc.ServerStream
}

type importServerStreamServer struct {
	grpc.ServerStream
}

func (x *importServerStreamServer) Send(m *subpackage.Output) error {
	return x.ServerStream.SendMsg(m)
}

func _Import_DuplexStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImportServer).DuplexStream(&importDuplexStreamServer{stream})
}

type Import_DuplexStreamServer interface {
	Send(*subpackage.Output) error
	Recv() (*subpackage.Input, error)
	grpc.ServerStream
}

type importDuplexStreamServer struct {
	grpc.ServerStream
}

func (x *importDuplexStreamServer) Send(m *subpackage.Output) error {
	return x.ServerStream.SendMsg(m)
}

func (x *importDuplexStreamServer) Recv() (*subpackage.Input, error) {
	m := new(subpackage.Input)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Import_SubSimple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(subpackage_subsubpackage.Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportServer).SubSimple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Import/SubSimple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportServer).SubSimple(ctx, req.(*subpackage_subsubpackage.Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Import_SubClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImportServer).SubClientStream(&importSubClientStreamServer{stream})
}

type Import_SubClientStreamServer interface {
	SendAndClose(*subpackage_subsubpackage.Output) error
	Recv() (*subpackage_subsubpackage.Input, error)
	grpc.ServerStream
}

type importSubClientStreamServer struct {
	grpc.ServerStream
}

func (x *importSubClientStreamServer) SendAndClose(m *subpackage_subsubpackage.Output) error {
	return x.ServerStream.SendMsg(m)
}

func (x *importSubClientStreamServer) Recv() (*subpackage_subsubpackage.Input, error) {
	m := new(subpackage_subsubpackage.Input)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Import_SubServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(subpackage_subsubpackage.Input)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImportServer).SubServerStream(m, &importSubServerStreamServer{stream})
}

type Import_SubServerStreamServer interface {
	Send(*subpackage_subsubpackage.Output) error
	grpc.ServerStream
}

type importSubServerStreamServer struct {
	grpc.ServerStream
}

func (x *importSubServerStreamServer) Send(m *subpackage_subsubpackage.Output) error {
	return x.ServerStream.SendMsg(m)
}

func _Import_SubDuplexStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImportServer).SubDuplexStream(&importSubDuplexStreamServer{stream})
}

type Import_SubDuplexStreamServer interface {
	Send(*subpackage_subsubpackage.Output) error
	Recv() (*subpackage_subsubpackage.Input, error)
	grpc.ServerStream
}

type importSubDuplexStreamServer struct {
	grpc.ServerStream
}

func (x *importSubDuplexStreamServer) Send(m *subpackage_subsubpackage.Output) error {
	return x.ServerStream.SendMsg(m)
}

func (x *importSubDuplexStreamServer) Recv() (*subpackage_subsubpackage.Input, error) {
	m := new(subpackage_subsubpackage.Input)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Import_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Import",
	HandlerType: (*ImportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Simple",
			Handler:    _Import_Simple_Handler,
		},
		{
			MethodName: "SubSimple",
			Handler:    _Import_SubSimple_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _Import_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _Import_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DuplexStream",
			Handler:       _Import_DuplexStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SubClientStream",
			Handler:       _Import_SubClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SubServerStream",
			Handler:       _Import_SubServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubDuplexStream",
			Handler:       _Import_SubDuplexStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "import.proto",
}

func init() { proto.RegisterFile("import.proto", fileDescriptorImport) }

var fileDescriptorImport = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0xcc, 0x2d, 0xc8,
	0x2f, 0x2a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0x92, 0x28, 0x2e,
	0x4d, 0x2a, 0x48, 0x4c, 0xce, 0x4e, 0x4c, 0x4f, 0xd5, 0x4f, 0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49,
	0x85, 0xc8, 0x4a, 0xa9, 0x21, 0xc9, 0x14, 0x97, 0x26, 0xe1, 0x52, 0x67, 0x74, 0x80, 0x85, 0x8b,
	0xcd, 0x13, 0x6c, 0xac, 0x90, 0x3e, 0x17, 0x5b, 0x70, 0x26, 0x48, 0x4a, 0x48, 0x50, 0x0f, 0xa1,
	0x5e, 0xcf, 0x33, 0xaf, 0xa0, 0xb4, 0x44, 0x4a, 0x08, 0x59, 0xc8, 0xbf, 0xb4, 0xa4, 0xa0, 0xb4,
	0x44, 0xc8, 0x9c, 0x8b, 0xc7, 0x39, 0x27, 0x33, 0x35, 0xaf, 0x24, 0xb8, 0xa4, 0x28, 0x35, 0x31,
	0x97, 0x48, 0x6d, 0x1a, 0x8c, 0x20, 0x8d, 0xc1, 0xa9, 0x45, 0x65, 0xa9, 0x45, 0x24, 0x69, 0x34,
	0x60, 0x14, 0xb2, 0xe4, 0xe2, 0x71, 0x29, 0x2d, 0xc8, 0x49, 0xad, 0x20, 0xd1, 0x46, 0x03, 0x46,
	0x21, 0x3f, 0x2e, 0xce, 0xe0, 0xd2, 0x24, 0xa8, 0x07, 0xe5, 0x91, 0x15, 0xa1, 0x04, 0x0f, 0xd4,
	0x14, 0x05, 0xdc, 0x0a, 0xa0, 0x9e, 0x0f, 0xe3, 0xe2, 0x0f, 0x2e, 0x4d, 0x42, 0xf1, 0x3f, 0xe5,
	0xa6, 0x6a, 0x30, 0x42, 0xcd, 0x45, 0x09, 0x1e, 0xca, 0xcd, 0x35, 0x60, 0x14, 0x8a, 0x00, 0x9b,
	0x8b, 0x12, 0x7a, 0xd4, 0x70, 0xaf, 0x01, 0xa3, 0x93, 0xc0, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e,
	0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1, 0x1c, 0x43, 0x12, 0x1b, 0x38, 0x6d, 0x19,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x00, 0x56, 0x06, 0xb1, 0x02, 0x00, 0x00,
}
